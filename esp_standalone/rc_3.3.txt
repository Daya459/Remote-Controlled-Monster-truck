#include<SoftwareSerial.h>
#include <ESP8266WiFi.h>
WiFiClient client;
WiFiServer server(80);
const char* ssid = "Tech Cravers";
const char* password = "craving for more";
String data ="";
/* define L298N or L293D motor control pins */
int MC1_M1_IN1 = 0; // GPIO0(D3)
int MC1_M1_IN2 = 4; // GPIO4(D2)
int MC1_M2_IN1 = 5; // GPIO5(D1)
int MC1_M2_IN2 = 16; // GPIO16(D0)
int ENB = 2; /* GPIO2(D4) -> SPEED Enable */
int MC2_M1_IN1 = 14; // GPIO14(D5)
int MC2_M1_IN2 = 12; // GPIO12(D6)
int MC2_M2_IN1 = 13; // GPIO13(D7)
int MC2_M2_IN2 = 15; // GPIO15(D8)
int command[3];
String checkClient (void)
{
 while(!client.available()) delay(1);
 String request = client.readStringUntil('\r');
 request.remove(0, 5);
 request.remove(request.length()-9,9);
 return request;
}
void setup()
{
 Serial.begin(115200);
 pinMode(MC1_M1_IN1, OUTPUT);
 pinMode(MC1_M1_IN2, OUTPUT);
 pinMode(MC1_M2_IN1, OUTPUT);
 pinMode(MC1_M2_IN2, OUTPUT);
 pinMode(ENB, OUTPUT);

 pinMode(MC2_M1_IN1, OUTPUT);
 pinMode(MC2_M1_IN2, OUTPUT);
 pinMode(MC2_M2_IN1, OUTPUT);
 pinMode(MC2_M2_IN2, OUTPUT);
 server.begin();
 Serial.print("Connected to:");
 Serial.println(WiFi.localIP());
 analogWrite(ENB,0);
}
void loop()
{
 /* If the server available, run the "checkClient" function */
 client = server.available();
 if (!client) return;
 data = checkClient ();
 Serial.println(data);
 command[0]=data.substring(0,1).toInt();
 command[1]=data.substring(1,2).toInt();
 command[2]=data.substring(2).toInt();
 Serial.println(command[0]);
 Serial.println(command[1]);
 Serial.println(command[2]);
 data="";
 analogWrite(ENB,command[2]);

switch(command[0])
{
case 0:
if (command[1] == 4)
{
 Serial.println("f4wd");
//front tyres
 digitalWrite(MC1_M1_IN1,HIGH);
 digitalWrite(MC1_M1_IN2,LOW);
 digitalWrite(MC1_M2_IN1,HIGH);
 digitalWrite(MC1_M2_IN2,LOW);
//back tyres
 digitalWrite(MC2_M1_IN1,HIGH);
 digitalWrite(MC2_M1_IN2, LOW);
 digitalWrite(MC2_M2_IN1,HIGH);
 digitalWrite(MC2_M2_IN2,LOW);
}
else if (command[1] == 2)
{
 Serial.println("f2wd");
//front tyres
 digitalWrite(MC1_M1_IN1,LOW);
 digitalWrite(MC1_M1_IN2,LOW);
 digitalWrite(MC1_M2_IN1,LOW);
 digitalWrite(MC1_M2_IN2,LOW);
//back tyres
 digitalWrite(MC2_M1_IN1,HIGH);
 digitalWrite(MC2_M1_IN2, LOW);
 digitalWrite(MC2_M2_IN1,HIGH);
 digitalWrite(MC2_M2_IN2,LOW);
}
break;
case 1:
 Serial.println("f/r");
//front tyres
//Left tyres
 digitalWrite(MC1_M1_IN1,HIGH);
 digitalWrite(MC1_M1_IN2, LOW);
//Right tyres
 digitalWrite(MC1_M2_IN1,LOW);
 digitalWrite(MC1_M2_IN2,LOW);
//back tyres
//Left tyres
 digitalWrite(MC2_M1_IN1,HIGH);
 digitalWrite(MC2_M1_IN2, LOW);
//Right tyres
 digitalWrite(MC2_M2_IN1,HIGH);
 digitalWrite(MC2_M2_IN2,LOW);
break;
case 2:
 Serial.println("r");
//front tyres
//Left tyres
 digitalWrite(MC1_M1_IN1,HIGH);
 digitalWrite(MC1_M1_IN2, LOW);
//Right tyres
 digitalWrite(MC1_M2_IN1,LOW); 
 digitalWrite(MC1_M2_IN2,HIGH);
//back tyres
//Left tyres
 digitalWrite(MC2_M1_IN1,HIGH);
 digitalWrite(MC2_M1_IN2, LOW);
//Right tyres
 digitalWrite(MC2_M2_IN1,LOW);
 digitalWrite(MC2_M2_IN2,HIGH);
break;
case 3:
 Serial.println("b/r");
//front tyres
//front tyres
//Left tyres
 digitalWrite(MC1_M1_IN1,LOW);
 digitalWrite(MC1_M1_IN2,HIGH);
//Right tyres
 digitalWrite(MC1_M2_IN1,LOW);
 digitalWrite(MC1_M2_IN2,HIGH);
//back tyres
//Left tyres
 digitalWrite(MC2_M1_IN1,LOW);
 digitalWrite(MC2_M1_IN2,HIGH);
//Right tyres
 digitalWrite(MC2_M2_IN1,LOW);
 digitalWrite(MC2_M2_IN2,LOW);
break;
case 4:
if (command[1] == 4)
{
 Serial.println("b4wd");
//front tyres
//Left tyres
 digitalWrite(MC1_M1_IN1,LOW);
 digitalWrite(MC1_M1_IN2,HIGH);
//Right tyres
 digitalWrite(MC1_M2_IN1,LOW);
 digitalWrite(MC1_M2_IN2,HIGH);
//back tyres
//Left tyres
 digitalWrite(MC2_M1_IN1,LOW);
 digitalWrite(MC2_M1_IN2,HIGH);
//Right tyres
 digitalWrite(MC2_M2_IN1,LOW);
 digitalWrite(MC2_M2_IN2,HIGH);
}
if (command[1] == 2)
{
 Serial.println("b2wd");
//front tyres
//Left tyres
 digitalWrite(MC1_M1_IN1,LOW);
 digitalWrite(MC1_M1_IN2,LOW);
//Right tyres
 digitalWrite(MC1_M2_IN1,LOW);
 digitalWrite(MC1_M2_IN2,LOW);
//back tyres
//Left tyres
 digitalWrite(MC2_M1_IN1,LOW);
 digitalWrite(MC2_M1_IN2,HIGH);
//Right tyres
 digitalWrite(MC2_M2_IN1,LOW);
 digitalWrite(MC2_M2_IN2,HIGH);
}
break;
case 5:
 Serial.println("b/l");
//front tyres
//Left tyres
 digitalWrite(MC1_M1_IN1,LOW);
 digitalWrite(MC1_M1_IN2,HIGH);
//Right tyres
 digitalWrite(MC1_M2_IN1,LOW);
 digitalWrite(MC1_M2_IN2,HIGH);
//back tyres
//Left tyres
 digitalWrite(MC2_M1_IN1,LOW);
 digitalWrite(MC2_M1_IN2,LOW);
//Right tyres
 digitalWrite(MC2_M2_IN1,LOW);
 digitalWrite(MC2_M2_IN2,HIGH);
break;
case 6:
 Serial.println("l");
//front tyres
//Left tyres
 digitalWrite(MC1_M1_IN1,LOW);
 digitalWrite(MC1_M1_IN2,HIGH);
//Right tyres
 digitalWrite(MC1_M2_IN1,HIGH);
 digitalWrite(MC1_M2_IN2,LOW);
//back tyres
//Left tyres
 digitalWrite(MC2_M1_IN1,LOW);
 digitalWrite(MC2_M1_IN2,HIGH);
//Right tyres
 digitalWrite(MC2_M2_IN1,HIGH);
 digitalWrite(MC2_M2_IN2,LOW);
break;
case 7:
 Serial.println("f/l");
//front tyres
//Left tyres
 digitalWrite(MC1_M1_IN1,LOW);
 digitalWrite(MC1_M1_IN2, LOW);
//Right tyres
 digitalWrite(MC1_M2_IN1,HIGH);
 digitalWrite(MC1_M2_IN2,LOW);
//back tyres
//Left tyres
 digitalWrite(MC2_M1_IN1,HIGH);
 digitalWrite(MC2_M1_IN2, LOW);
//Right tyres
 digitalWrite(MC2_M2_IN1,HIGH);
 digitalWrite(MC2_M2_IN2,LOW);
break;
case 8:
Serial.println("FULL STOPP");
//front tyres
//Left tyres
 digitalWrite(MC1_M1_IN1, LOW);
 digitalWrite(MC1_M1_IN2, LOW);
//Right tyres
 digitalWrite(MC1_M2_IN1, LOW);
 digitalWrite(MC1_M2_IN2, LOW);
//back tyres
//Left tyres
 digitalWrite(MC2_M1_IN1, LOW);
 digitalWrite(MC2_M1_IN2, LOW);
//Right tyres
 digitalWrite(MC2_M2_IN1, LOW);
 digitalWrite(MC2_M2_IN2, LOW);
break;
}
}